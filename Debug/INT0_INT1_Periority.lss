
INT0_INT1_Periority.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000026f2  00002786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c6  008000c6  000027ec  2**0
                  ALLOC
  3 .stab         000025a4  00000000  00000000  000027ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011bd  00000000  00000000  00004d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000061fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a69b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_1>
       8:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_2>
       c:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3c       	cpi	r26, 0xCC	; 204
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 12 	call	0x25cc	; 0x25cc <main>
      8a:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_VidEn>:
/*************************MCAL*************************/
#include "GIE_Interface.h"
#include "GIE_Config.h"
#include "GIE_Private.h"

void GIE_VidEn(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_VidDisable>:
void GIE_VidDisable(void){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
CLR_BIT(SREG,SREG_I);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <EXTI_voidInit>:
static void (*Global_pvInt1NotifcationFunction)(void) = NULL;
static void (*Global_pvInt2NotifcationFunction)(void) = NULL;

/*********************FUNCTIONS DEFINITIONS******************************/
void EXTI_voidInit (void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	#if	EXTI_INT0_ENALBE == ENABLE
		SET_BIT(GICR, GICR_INT0);
     b86:	ab e5       	ldi	r26, 0x5B	; 91
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e5       	ldi	r30, 0x5B	; 91
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
			CLR_BIT(MCUCR, MCUCR_ISC00);
		#elif EXTI_INT0_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC01);
     b94:	a5 e5       	ldi	r26, 0x55	; 85
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e5 e5       	ldi	r30, 0x55	; 85
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     ba2:	a5 e5       	ldi	r26, 0x55	; 85
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e5 e5       	ldi	r30, 0x55	; 85
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	8c 93       	st	X, r24
		#error "EXTI_INT0_ENALBE Error Configuration"
	#endif


	#if	EXTI_INT1_ENALBE == ENALBE
		SET_BIT(GICR, GICR_INT1);
     bb0:	ab e5       	ldi	r26, 0x5B	; 91
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	eb e5       	ldi	r30, 0x5B	; 91
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
			CLR_BIT(MCUCR, MCUCR_ISC10);
		#elif EXTI_INT1_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR, MCUCR_ISC11);
     bbe:	a5 e5       	ldi	r26, 0x55	; 85
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e5       	ldi	r30, 0x55	; 85
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 60       	ori	r24, 0x08	; 8
     bca:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC10);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8c 93       	st	X, r24
			SET_BIT(MCUCSR, MCUCSR_ISC2);
		#else
			#error "EXTI_INT2_CONTROL Error Configuration"
		#endif
	#elif EXTI_INT2_ENALBE == DISABLE
		CLR_BIT(GICR, GICR_INT2);
     bda:	ab e5       	ldi	r26, 0x5B	; 91
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	eb e5       	ldi	r30, 0x5B	; 91
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8f 7d       	andi	r24, 0xDF	; 223
     be6:	8c 93       	st	X, r24
	#else
		#error "EXTI_INT2_ENALBE Error Configuration"
	#endif
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <EXTI_u8SetInt0SenseControl>:


u8 EXTI_u8SetInt0SenseControl (u8 Copy_u8SenseControl)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <EXTI_u8SetInt0SenseControl+0x6>
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <EXTI_u8SetInt0SenseControl+0x8>
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	3c 83       	std	Y+4, r19	; 0x04
     c04:	2b 83       	std	Y+3, r18	; 0x03
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	91 05       	cpc	r25, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <EXTI_u8SetInt0SenseControl+0x24>
     c10:	42 c0       	rjmp	.+132    	; 0xc96 <EXTI_u8SetInt0SenseControl+0xa8>
     c12:	2b 81       	ldd	r18, Y+3	; 0x03
     c14:	3c 81       	ldd	r19, Y+4	; 0x04
     c16:	22 30       	cpi	r18, 0x02	; 2
     c18:	31 05       	cpc	r19, r1
     c1a:	2c f4       	brge	.+10     	; 0xc26 <EXTI_u8SetInt0SenseControl+0x38>
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	51 f1       	breq	.+84     	; 0xc78 <EXTI_u8SetInt0SenseControl+0x8a>
     c24:	47 c0       	rjmp	.+142    	; 0xcb4 <EXTI_u8SetInt0SenseControl+0xc6>
     c26:	2b 81       	ldd	r18, Y+3	; 0x03
     c28:	3c 81       	ldd	r19, Y+4	; 0x04
     c2a:	22 30       	cpi	r18, 0x02	; 2
     c2c:	31 05       	cpc	r19, r1
     c2e:	31 f0       	breq	.+12     	; 0xc3c <EXTI_u8SetInt0SenseControl+0x4e>
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	91 05       	cpc	r25, r1
     c38:	81 f0       	breq	.+32     	; 0xc5a <EXTI_u8SetInt0SenseControl+0x6c>
     c3a:	3c c0       	rjmp	.+120    	; 0xcb4 <EXTI_u8SetInt0SenseControl+0xc6>
	{
		case LOW_LEVEL:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
     c3c:	a5 e5       	ldi	r26, 0x55	; 85
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e5       	ldi	r30, 0x55	; 85
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8d 7f       	andi	r24, 0xFD	; 253
     c48:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     c4a:	a5 e5       	ldi	r26, 0x55	; 85
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e5 e5       	ldi	r30, 0x55	; 85
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	8c 93       	st	X, r24
     c58:	30 c0       	rjmp	.+96     	; 0xcba <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case ON_CHANGE:
		{
			CLR_BIT(MCUCR, MCUCR_ISC01);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     c68:	a5 e5       	ldi	r26, 0x55	; 85
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e5 e5       	ldi	r30, 0x55	; 85
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	81 60       	ori	r24, 0x01	; 1
     c74:	8c 93       	st	X, r24
     c76:	21 c0       	rjmp	.+66     	; 0xcba <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case FALLING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
     c78:	a5 e5       	ldi	r26, 0x55	; 85
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e5       	ldi	r30, 0x55	; 85
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	8c 93       	st	X, r24
			CLR_BIT(MCUCR, MCUCR_ISC00);
     c86:	a5 e5       	ldi	r26, 0x55	; 85
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e5 e5       	ldi	r30, 0x55	; 85
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	8e 7f       	andi	r24, 0xFE	; 254
     c92:	8c 93       	st	X, r24
     c94:	12 c0       	rjmp	.+36     	; 0xcba <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		case RISING_EDGE:
		{
			SET_BIT(MCUCR, MCUCR_ISC01);
     c96:	a5 e5       	ldi	r26, 0x55	; 85
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e5 e5       	ldi	r30, 0x55	; 85
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	82 60       	ori	r24, 0x02	; 2
     ca2:	8c 93       	st	X, r24
			SET_BIT(MCUCR, MCUCR_ISC00);
     ca4:	a5 e5       	ldi	r26, 0x55	; 85
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e5 e5       	ldi	r30, 0x55	; 85
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	81 60       	ori	r24, 0x01	; 1
     cb0:	8c 93       	st	X, r24
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <EXTI_u8SetInt0SenseControl+0xcc>
			break;
		}
		default:
		{
			return E_NOK;
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	08 c0       	rjmp	.+16     	; 0xcca <EXTI_u8SetInt0SenseControl+0xdc>
		}
	}
	SET_BIT(GICR, GICR_INT0);
     cba:	ab e5       	ldi	r26, 0x5B	; 91
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e5       	ldi	r30, 0x5B	; 91
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 64       	ori	r24, 0x40	; 64
     cc6:	8c 93       	st	X, r24
	return E_OK;
     cc8:	1a 82       	std	Y+2, r1	; 0x02
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EXTI_u8SetInt1SenseControl>:

u8 EXTI_u8SetInt1SenseControl(u8 Copy_u8SenseControl)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <EXTI_u8SetInt1SenseControl+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <EXTI_u8SetInt1SenseControl+0x8>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	3c 83       	std	Y+4, r19	; 0x04
     cf0:	2b 83       	std	Y+3, r18	; 0x03
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	91 05       	cpc	r25, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <EXTI_u8SetInt1SenseControl+0x24>
     cfc:	42 c0       	rjmp	.+132    	; 0xd82 <EXTI_u8SetInt1SenseControl+0xa8>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	2c f4       	brge	.+10     	; 0xd12 <EXTI_u8SetInt1SenseControl+0x38>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	51 f1       	breq	.+84     	; 0xd64 <EXTI_u8SetInt1SenseControl+0x8a>
     d10:	47 c0       	rjmp	.+142    	; 0xda0 <EXTI_u8SetInt1SenseControl+0xc6>
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	22 30       	cpi	r18, 0x02	; 2
     d18:	31 05       	cpc	r19, r1
     d1a:	31 f0       	breq	.+12     	; 0xd28 <EXTI_u8SetInt1SenseControl+0x4e>
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	91 05       	cpc	r25, r1
     d24:	81 f0       	breq	.+32     	; 0xd46 <EXTI_u8SetInt1SenseControl+0x6c>
     d26:	3c c0       	rjmp	.+120    	; 0xda0 <EXTI_u8SetInt1SenseControl+0xc6>
	{
	case LOW_LEVEL:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     d28:	a5 e5       	ldi	r26, 0x55	; 85
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e5 e5       	ldi	r30, 0x55	; 85
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     d36:	a5 e5       	ldi	r26, 0x55	; 85
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e5 e5       	ldi	r30, 0x55	; 85
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	8b 7f       	andi	r24, 0xFB	; 251
     d42:	8c 93       	st	X, r24
     d44:	30 c0       	rjmp	.+96     	; 0xda6 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case ON_CHANGE:
	{
		CLR_BIT(MCUCR, MCUCR_ISC11);
     d46:	a5 e5       	ldi	r26, 0x55	; 85
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e5 e5       	ldi	r30, 0x55	; 85
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	87 7f       	andi	r24, 0xF7	; 247
     d52:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     d54:	a5 e5       	ldi	r26, 0x55	; 85
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e5 e5       	ldi	r30, 0x55	; 85
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	8c 93       	st	X, r24
     d62:	21 c0       	rjmp	.+66     	; 0xda6 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case FALLING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     d64:	a5 e5       	ldi	r26, 0x55	; 85
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e5 e5       	ldi	r30, 0x55	; 85
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	88 60       	ori	r24, 0x08	; 8
     d70:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
     d72:	a5 e5       	ldi	r26, 0x55	; 85
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e5 e5       	ldi	r30, 0x55	; 85
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8b 7f       	andi	r24, 0xFB	; 251
     d7e:	8c 93       	st	X, r24
     d80:	12 c0       	rjmp	.+36     	; 0xda6 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCR, MCUCR_ISC11);
     d82:	a5 e5       	ldi	r26, 0x55	; 85
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e5 e5       	ldi	r30, 0x55	; 85
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
     d90:	a5 e5       	ldi	r26, 0x55	; 85
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e5       	ldi	r30, 0x55	; 85
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <EXTI_u8SetInt1SenseControl+0xcc>
		break;
	}
	default:
	{
		return E_NOK;
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	08 c0       	rjmp	.+16     	; 0xdb6 <EXTI_u8SetInt1SenseControl+0xdc>
	}
	}
	SET_BIT(GICR, GICR_INT1);
     da6:	ab e5       	ldi	r26, 0x5B	; 91
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	eb e5       	ldi	r30, 0x5B	; 91
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	8c 93       	st	X, r24
	return E_OK;
     db4:	1a 82       	std	Y+2, r1	; 0x02
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <EXTI_u8SetInt2SenseControl>:

u8 EXTI_u8SetInt2SenseControl(u8 Copy_u8SenseControl)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <EXTI_u8SetInt2SenseControl+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <EXTI_u8SetInt2SenseControl+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8SenseControl)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3c 83       	std	Y+4, r19	; 0x04
     ddc:	2b 83       	std	Y+3, r18	; 0x03
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	31 f0       	breq	.+12     	; 0xdf2 <EXTI_u8SetInt2SenseControl+0x2c>
     de6:	2b 81       	ldd	r18, Y+3	; 0x03
     de8:	3c 81       	ldd	r19, Y+4	; 0x04
     dea:	21 30       	cpi	r18, 0x01	; 1
     dec:	31 05       	cpc	r19, r1
     dee:	49 f0       	breq	.+18     	; 0xe02 <EXTI_u8SetInt2SenseControl+0x3c>
     df0:	10 c0       	rjmp	.+32     	; 0xe12 <EXTI_u8SetInt2SenseControl+0x4c>
	{
	case FALLING_EDGE:
	{
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
     df2:	a4 e5       	ldi	r26, 0x54	; 84
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e5       	ldi	r30, 0x54	; 84
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8f 7b       	andi	r24, 0xBF	; 191
     dfe:	8c 93       	st	X, r24
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	case RISING_EDGE:
	{
		SET_BIT(MCUCSR, MCUCSR_ISC2);
     e02:	a4 e5       	ldi	r26, 0x54	; 84
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e4 e5       	ldi	r30, 0x54	; 84
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	80 64       	ori	r24, 0x40	; 64
     e0e:	8c 93       	st	X, r24
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <EXTI_u8SetInt2SenseControl+0x52>
		break;
	}
	default:
	{
		return E_NOK;
     e12:	31 e0       	ldi	r19, 0x01	; 1
     e14:	3a 83       	std	Y+2, r19	; 0x02
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <EXTI_u8SetInt2SenseControl+0x62>
	}
	}
	SET_BIT(GICR, GICR_INT2);
     e18:	ab e5       	ldi	r26, 0x5B	; 91
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	eb e5       	ldi	r30, 0x5B	; 91
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 62       	ori	r24, 0x20	; 32
     e24:	8c 93       	st	X, r24
	return E_OK;
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <EXTI_u8Int0SetCallBack>:


u8 EXTI_u8Int0SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <EXTI_u8Int0SetCallBack+0x6>
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	41 f0       	breq	.+16     	; 0xe60 <EXTI_u8Int0SetCallBack+0x28>
	{
		Global_pvInt0NotifcationFunction = Copy_pvNotificationFunction;
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	90 93 c7 00 	sts	0x00C7, r25
     e58:	80 93 c6 00 	sts	0x00C6, r24
		return E_OK;
     e5c:	1b 82       	std	Y+3, r1	; 0x03
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <__vector_1>:

/*ISR for INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt0NotifcationFunction != NULL)
     e9c:	80 91 c6 00 	lds	r24, 0x00C6
     ea0:	90 91 c7 00 	lds	r25, 0x00C7
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	29 f0       	breq	.+10     	; 0xeb2 <__vector_1+0x40>
	{
		Global_pvInt0NotifcationFunction();
     ea8:	e0 91 c6 00 	lds	r30, 0x00C6
     eac:	f0 91 c7 00 	lds	r31, 0x00C7
     eb0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	00 d0       	rcall	.+0      	; 0xede <EXTI_u8Int1SetCallBack+0x6>
     ede:	0f 92       	push	r0
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	41 f0       	breq	.+16     	; 0xf00 <EXTI_u8Int1SetCallBack+0x28>
	{
		Global_pvInt1NotifcationFunction = Copy_pvNotificationFunction;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	90 93 c9 00 	sts	0x00C9, r25
     ef8:	80 93 c8 00 	sts	0x00C8, r24
		return E_OK;
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <__vector_2>:

/*ISR for INT1*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	ef 93       	push	r30
     f32:	ff 93       	push	r31
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt1NotifcationFunction != NULL)
     f3c:	80 91 c8 00 	lds	r24, 0x00C8
     f40:	90 91 c9 00 	lds	r25, 0x00C9
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	29 f0       	breq	.+10     	; 0xf52 <__vector_2+0x40>
	{
		Global_pvInt1NotifcationFunction();
     f48:	e0 91 c8 00 	lds	r30, 0x00C8
     f4c:	f0 91 c9 00 	lds	r31, 0x00C9
     f50:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack (void (*Copy_pvNotificationFunction) (void))
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <EXTI_u8Int2SetCallBack+0x6>
     f7e:	0f 92       	push	r0
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pvNotificationFunction != NULL)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <EXTI_u8Int2SetCallBack+0x28>
	{
		Global_pvInt2NotifcationFunction = Copy_pvNotificationFunction;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	90 93 cb 00 	sts	0x00CB, r25
     f98:	80 93 ca 00 	sts	0x00CA, r24
		return E_OK;
     f9c:	1b 82       	std	Y+3, r1	; 0x03
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		return E_NOK;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <__vector_3>:

/*ISR for INT2*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	if (Global_pvInt2NotifcationFunction != NULL)
     fdc:	80 91 ca 00 	lds	r24, 0x00CA
     fe0:	90 91 cb 00 	lds	r25, 0x00CB
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__vector_3+0x40>
	{
		Global_pvInt2NotifcationFunction();
     fe8:	e0 91 ca 00 	lds	r30, 0x00CA
     fec:	f0 91 cb 00 	lds	r31, 0x00CB
     ff0:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <DIO_Vid_SetPinDirection>:



								/*Setting pin Direction*/
/*Setting pin direction, make a specific pin is an input(DDRX=0) or output(DDRX=1)*/
void DIO_Vid_SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	27 97       	sbiw	r28, 0x07	; 7
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
    1030:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Direction == input){
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <DIO_Vid_SetPinDirection+0x22>
    1038:	74 c0       	rjmp	.+232    	; 0x1122 <DIO_Vid_SetPinDirection+0x10a>
		switch (Copy_u8Port){
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3f 83       	std	Y+7, r19	; 0x07
    1042:	2e 83       	std	Y+6, r18	; 0x06
    1044:	8e 81       	ldd	r24, Y+6	; 0x06
    1046:	9f 81       	ldd	r25, Y+7	; 0x07
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	59 f1       	breq	.+86     	; 0x10a4 <DIO_Vid_SetPinDirection+0x8c>
    104e:	2e 81       	ldd	r18, Y+6	; 0x06
    1050:	3f 81       	ldd	r19, Y+7	; 0x07
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	2c f4       	brge	.+10     	; 0x1062 <DIO_Vid_SetPinDirection+0x4a>
    1058:	8e 81       	ldd	r24, Y+6	; 0x06
    105a:	9f 81       	ldd	r25, Y+7	; 0x07
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f0       	breq	.+26     	; 0x107a <DIO_Vid_SetPinDirection+0x62>
    1060:	d2 c0       	rjmp	.+420    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
    1062:	2e 81       	ldd	r18, Y+6	; 0x06
    1064:	3f 81       	ldd	r19, Y+7	; 0x07
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	89 f1       	breq	.+98     	; 0x10ce <DIO_Vid_SetPinDirection+0xb6>
    106c:	8e 81       	ldd	r24, Y+6	; 0x06
    106e:	9f 81       	ldd	r25, Y+7	; 0x07
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_Vid_SetPinDirection+0x60>
    1076:	40 c0       	rjmp	.+128    	; 0x10f8 <DIO_Vid_SetPinDirection+0xe0>
    1078:	c6 c0       	rjmp	.+396    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : CLR_BIT(DDRA , Copy_u8Pin); break;
    107a:	aa e3       	ldi	r26, 0x3A	; 58
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	48 2f       	mov	r20, r24
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <DIO_Vid_SetPinDirection+0x80>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <DIO_Vid_SetPinDirection+0x7c>
    109c:	80 95       	com	r24
    109e:	84 23       	and	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	b1 c0       	rjmp	.+354    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : CLR_BIT(DDRB , Copy_u8Pin); break;
    10a4:	a7 e3       	ldi	r26, 0x37	; 55
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_Vid_SetPinDirection+0xaa>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_Vid_SetPinDirection+0xa6>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	9c c0       	rjmp	.+312    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : CLR_BIT(DDRC , Copy_u8Pin); break;
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_Vid_SetPinDirection+0xd4>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_Vid_SetPinDirection+0xd0>
    10f0:	80 95       	com	r24
    10f2:	84 23       	and	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	87 c0       	rjmp	.+270    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : CLR_BIT(DDRD , Copy_u8Pin); break;
    10f8:	a1 e3       	ldi	r26, 0x31	; 49
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e1 e3       	ldi	r30, 0x31	; 49
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_Vid_SetPinDirection+0xfe>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_Vid_SetPinDirection+0xfa>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	72 c0       	rjmp	.+228    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>

		}
	}
	else if(Copy_u8Direction == output){
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	09 f0       	breq	.+2      	; 0x112a <DIO_Vid_SetPinDirection+0x112>
    1128:	6e c0       	rjmp	.+220    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
		switch (Copy_u8Port){
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3d 83       	std	Y+5, r19	; 0x05
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	49 f1       	breq	.+82     	; 0x1190 <DIO_Vid_SetPinDirection+0x178>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <DIO_Vid_SetPinDirection+0x13a>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 f0       	breq	.+24     	; 0x1168 <DIO_Vid_SetPinDirection+0x150>
    1150:	5a c0       	rjmp	.+180    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	71 f1       	breq	.+92     	; 0x11b8 <DIO_Vid_SetPinDirection+0x1a0>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	e9 f1       	breq	.+122    	; 0x11e0 <DIO_Vid_SetPinDirection+0x1c8>
    1166:	4f c0       	rjmp	.+158    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_A : SET_BIT(DDRA , Copy_u8Pin); break;
    1168:	aa e3       	ldi	r26, 0x3A	; 58
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea e3       	ldi	r30, 0x3A	; 58
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_Vid_SetPinDirection+0x16e>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_Vid_SetPinDirection+0x16a>
    118a:	84 2b       	or	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	3b c0       	rjmp	.+118    	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_B : SET_BIT(DDRB , Copy_u8Pin); break;
    1190:	a7 e3       	ldi	r26, 0x37	; 55
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e7 e3       	ldi	r30, 0x37	; 55
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_Vid_SetPinDirection+0x196>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_Vid_SetPinDirection+0x192>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	27 c0       	rjmp	.+78     	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_C : SET_BIT(DDRC , Copy_u8Pin); break;
    11b8:	a4 e3       	ldi	r26, 0x34	; 52
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e4 e3       	ldi	r30, 0x34	; 52
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_Vid_SetPinDirection+0x1be>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_Vid_SetPinDirection+0x1ba>
    11da:	84 2b       	or	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <DIO_Vid_SetPinDirection+0x1ee>
			case Port_D : SET_BIT(DDRD , Copy_u8Pin); break;
    11e0:	a1 e3       	ldi	r26, 0x31	; 49
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e1 e3       	ldi	r30, 0x31	; 49
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_Vid_SetPinDirection+0x1e6>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_Vid_SetPinDirection+0x1e2>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24

		}
	}

}
    1206:	27 96       	adiw	r28, 0x07	; 7
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <DIO_Vid_SetPinValue>:

                         /*Setting pin Value*/
/*Setting pin value, give a special value(high=1 or low=0) to specific pin */
void DIO_Vid_SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value){
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	27 97       	sbiw	r28, 0x07	; 7
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	6a 83       	std	Y+2, r22	; 0x02
    1230:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Value == PinLow){
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	88 23       	and	r24, r24
    1236:	09 f0       	breq	.+2      	; 0x123a <DIO_Vid_SetPinValue+0x22>
    1238:	74 c0       	rjmp	.+232    	; 0x1322 <DIO_Vid_SetPinValue+0x10a>
		switch (Copy_u8Port){
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3f 83       	std	Y+7, r19	; 0x07
    1242:	2e 83       	std	Y+6, r18	; 0x06
    1244:	8e 81       	ldd	r24, Y+6	; 0x06
    1246:	9f 81       	ldd	r25, Y+7	; 0x07
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	59 f1       	breq	.+86     	; 0x12a4 <DIO_Vid_SetPinValue+0x8c>
    124e:	2e 81       	ldd	r18, Y+6	; 0x06
    1250:	3f 81       	ldd	r19, Y+7	; 0x07
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <DIO_Vid_SetPinValue+0x4a>
    1258:	8e 81       	ldd	r24, Y+6	; 0x06
    125a:	9f 81       	ldd	r25, Y+7	; 0x07
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f0       	breq	.+26     	; 0x127a <DIO_Vid_SetPinValue+0x62>
    1260:	d2 c0       	rjmp	.+420    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
    1262:	2e 81       	ldd	r18, Y+6	; 0x06
    1264:	3f 81       	ldd	r19, Y+7	; 0x07
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	89 f1       	breq	.+98     	; 0x12ce <DIO_Vid_SetPinValue+0xb6>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	9f 81       	ldd	r25, Y+7	; 0x07
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <DIO_Vid_SetPinValue+0x60>
    1276:	40 c0       	rjmp	.+128    	; 0x12f8 <DIO_Vid_SetPinValue+0xe0>
    1278:	c6 c0       	rjmp	.+396    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : CLR_BIT(PORTA , Copy_u8Pin); break;
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_Vid_SetPinValue+0x80>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_Vid_SetPinValue+0x7c>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	b1 c0       	rjmp	.+354    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : CLR_BIT(PORTB , Copy_u8Pin); break;
    12a4:	a8 e3       	ldi	r26, 0x38	; 56
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e3       	ldi	r30, 0x38	; 56
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_Vid_SetPinValue+0xaa>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_Vid_SetPinValue+0xa6>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	9c c0       	rjmp	.+312    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : CLR_BIT(PORTC , Copy_u8Pin); break;
    12ce:	a5 e3       	ldi	r26, 0x35	; 53
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e5 e3       	ldi	r30, 0x35	; 53
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_Vid_SetPinValue+0xd4>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_Vid_SetPinValue+0xd0>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	87 c0       	rjmp	.+270    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : CLR_BIT(PORTD , Copy_u8Pin); break;
    12f8:	a2 e3       	ldi	r26, 0x32	; 50
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e2 e3       	ldi	r30, 0x32	; 50
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_Vid_SetPinValue+0xfe>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_Vid_SetPinValue+0xfa>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	72 c0       	rjmp	.+228    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>

		}
	}
	else if(Copy_u8Value == PinHigh){
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	09 f0       	breq	.+2      	; 0x132a <DIO_Vid_SetPinValue+0x112>
    1328:	6e c0       	rjmp	.+220    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
		switch (Copy_u8Port){
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	3d 83       	std	Y+5, r19	; 0x05
    1332:	2c 83       	std	Y+4, r18	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    1336:	9d 81       	ldd	r25, Y+5	; 0x05
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	91 05       	cpc	r25, r1
    133c:	49 f1       	breq	.+82     	; 0x1390 <DIO_Vid_SetPinValue+0x178>
    133e:	2c 81       	ldd	r18, Y+4	; 0x04
    1340:	3d 81       	ldd	r19, Y+5	; 0x05
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	2c f4       	brge	.+10     	; 0x1352 <DIO_Vid_SetPinValue+0x13a>
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	61 f0       	breq	.+24     	; 0x1368 <DIO_Vid_SetPinValue+0x150>
    1350:	5a c0       	rjmp	.+180    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
    1352:	2c 81       	ldd	r18, Y+4	; 0x04
    1354:	3d 81       	ldd	r19, Y+5	; 0x05
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	71 f1       	breq	.+92     	; 0x13b8 <DIO_Vid_SetPinValue+0x1a0>
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	91 05       	cpc	r25, r1
    1364:	e9 f1       	breq	.+122    	; 0x13e0 <DIO_Vid_SetPinValue+0x1c8>
    1366:	4f c0       	rjmp	.+158    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_A : SET_BIT(PORTA , Copy_u8Pin); break;
    1368:	ab e3       	ldi	r26, 0x3B	; 59
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_Vid_SetPinValue+0x16e>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_Vid_SetPinValue+0x16a>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	3b c0       	rjmp	.+118    	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_B : SET_BIT(PORTB , Copy_u8Pin); break;
    1390:	a8 e3       	ldi	r26, 0x38	; 56
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e8 e3       	ldi	r30, 0x38	; 56
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <DIO_Vid_SetPinValue+0x196>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <DIO_Vid_SetPinValue+0x192>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	27 c0       	rjmp	.+78     	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_C : SET_BIT(PORTC , Copy_u8Pin); break;
    13b8:	a5 e3       	ldi	r26, 0x35	; 53
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <DIO_Vid_SetPinValue+0x1be>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <DIO_Vid_SetPinValue+0x1ba>
    13da:	84 2b       	or	r24, r20
    13dc:	8c 93       	st	X, r24
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <DIO_Vid_SetPinValue+0x1ee>
			case Port_D : SET_BIT(PORTD , Copy_u8Pin); break;
    13e0:	a2 e3       	ldi	r26, 0x32	; 50
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_Vid_SetPinValue+0x1e6>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_Vid_SetPinValue+0x1e2>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24

		}
	}
}
    1406:	27 96       	adiw	r28, 0x07	; 7
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <DIO_Vid_GetPinValue>:

						/*Getting pin Value*/
/*Getting pin value, check the value of specific pin and store this value into *Data (mostly used with switches)*/
void DIO_Vid_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *pu8Data){
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <DIO_Vid_GetPinValue+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_Vid_GetPinValue+0x8>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_Vid_GetPinValue+0xa>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
    142a:	5c 83       	std	Y+4, r21	; 0x04
    142c:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3e 83       	std	Y+6, r19	; 0x06
    1436:	2d 83       	std	Y+5, r18	; 0x05
    1438:	4d 81       	ldd	r20, Y+5	; 0x05
    143a:	5e 81       	ldd	r21, Y+6	; 0x06
    143c:	41 30       	cpi	r20, 0x01	; 1
    143e:	51 05       	cpc	r21, r1
    1440:	59 f1       	breq	.+86     	; 0x1498 <DIO_Vid_GetPinValue+0x80>
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	91 05       	cpc	r25, r1
    144a:	34 f4       	brge	.+12     	; 0x1458 <DIO_Vid_GetPinValue+0x40>
    144c:	2d 81       	ldd	r18, Y+5	; 0x05
    144e:	3e 81       	ldd	r19, Y+6	; 0x06
    1450:	21 15       	cp	r18, r1
    1452:	31 05       	cpc	r19, r1
    1454:	69 f0       	breq	.+26     	; 0x1470 <DIO_Vid_GetPinValue+0x58>
    1456:	5b c0       	rjmp	.+182    	; 0x150e <DIO_Vid_GetPinValue+0xf6>
    1458:	4d 81       	ldd	r20, Y+5	; 0x05
    145a:	5e 81       	ldd	r21, Y+6	; 0x06
    145c:	42 30       	cpi	r20, 0x02	; 2
    145e:	51 05       	cpc	r21, r1
    1460:	79 f1       	breq	.+94     	; 0x14c0 <DIO_Vid_GetPinValue+0xa8>
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	09 f4       	brne	.+2      	; 0x146e <DIO_Vid_GetPinValue+0x56>
    146c:	3d c0       	rjmp	.+122    	; 0x14e8 <DIO_Vid_GetPinValue+0xd0>
    146e:	4f c0       	rjmp	.+158    	; 0x150e <DIO_Vid_GetPinValue+0xf6>

		case Port_A : *pu8Data = Get_BIT(PINA , Copy_u8Pin); break;
    1470:	e9 e3       	ldi	r30, 0x39	; 57
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_Vid_GetPinValue+0x70>
    1484:	55 95       	asr	r21
    1486:	47 95       	ror	r20
    1488:	8a 95       	dec	r24
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_Vid_GetPinValue+0x6c>
    148c:	ca 01       	movw	r24, r20
    148e:	81 70       	andi	r24, 0x01	; 1
    1490:	eb 81       	ldd	r30, Y+3	; 0x03
    1492:	fc 81       	ldd	r31, Y+4	; 0x04
    1494:	80 83       	st	Z, r24
    1496:	3b c0       	rjmp	.+118    	; 0x150e <DIO_Vid_GetPinValue+0xf6>
		case Port_B : *pu8Data = Get_BIT(PINB , Copy_u8Pin); break;
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a9 01       	movw	r20, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_Vid_GetPinValue+0x98>
    14ac:	55 95       	asr	r21
    14ae:	47 95       	ror	r20
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_Vid_GetPinValue+0x94>
    14b4:	ca 01       	movw	r24, r20
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	eb 81       	ldd	r30, Y+3	; 0x03
    14ba:	fc 81       	ldd	r31, Y+4	; 0x04
    14bc:	80 83       	st	Z, r24
    14be:	27 c0       	rjmp	.+78     	; 0x150e <DIO_Vid_GetPinValue+0xf6>
		case Port_C : *pu8Data = Get_BIT(PINC , Copy_u8Pin); break;
    14c0:	e3 e3       	ldi	r30, 0x33	; 51
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a9 01       	movw	r20, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_Vid_GetPinValue+0xc0>
    14d4:	55 95       	asr	r21
    14d6:	47 95       	ror	r20
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_Vid_GetPinValue+0xbc>
    14dc:	ca 01       	movw	r24, r20
    14de:	81 70       	andi	r24, 0x01	; 1
    14e0:	eb 81       	ldd	r30, Y+3	; 0x03
    14e2:	fc 81       	ldd	r31, Y+4	; 0x04
    14e4:	80 83       	st	Z, r24
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <DIO_Vid_GetPinValue+0xf6>
		case Port_D : *pu8Data = Get_BIT(PIND , Copy_u8Pin); break;
    14e8:	e0 e3       	ldi	r30, 0x30	; 48
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a9 01       	movw	r20, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_Vid_GetPinValue+0xe8>
    14fc:	55 95       	asr	r21
    14fe:	47 95       	ror	r20
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_Vid_GetPinValue+0xe4>
    1504:	ca 01       	movw	r24, r20
    1506:	81 70       	andi	r24, 0x01	; 1
    1508:	eb 81       	ldd	r30, Y+3	; 0x03
    150a:	fc 81       	ldd	r31, Y+4	; 0x04
    150c:	80 83       	st	Z, r24
	}
}
    150e:	26 96       	adiw	r28, 0x06	; 6
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <DIO_Vid_SetPortDirection>:



										/*Setting port Direction*/
/*Setting Port direction register, make the whole port output all bits are ones or input all bits are zeros*/
void DIO_Vid_SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction){
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <DIO_Vid_SetPortDirection+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <DIO_Vid_SetPortDirection+0x8>
    1528:	00 d0       	rcall	.+0      	; 0x152a <DIO_Vid_SetPortDirection+0xa>
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Direction == output){
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	99 f5       	brne	.+102    	; 0x159e <DIO_Vid_SetPortDirection+0x7e>
			switch (Copy_u8Port){
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3e 83       	std	Y+6, r19	; 0x06
    1540:	2d 83       	std	Y+5, r18	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	d1 f0       	breq	.+52     	; 0x1580 <DIO_Vid_SetPortDirection+0x60>
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	2c f4       	brge	.+10     	; 0x1560 <DIO_Vid_SetPortDirection+0x40>
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	61 f0       	breq	.+24     	; 0x1576 <DIO_Vid_SetPortDirection+0x56>
    155e:	50 c0       	rjmp	.+160    	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
    1560:	2d 81       	ldd	r18, Y+5	; 0x05
    1562:	3e 81       	ldd	r19, Y+6	; 0x06
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <DIO_Vid_SetPortDirection+0x6a>
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	83 30       	cpi	r24, 0x03	; 3
    1570:	91 05       	cpc	r25, r1
    1572:	81 f0       	breq	.+32     	; 0x1594 <DIO_Vid_SetPortDirection+0x74>
    1574:	45 c0       	rjmp	.+138    	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b11111111; break;
    1576:	ea e3       	ldi	r30, 0x3A	; 58
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	80 83       	st	Z, r24
    157e:	40 c0       	rjmp	.+128    	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b11111111; break;
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8f ef       	ldi	r24, 0xFF	; 255
    1586:	80 83       	st	Z, r24
    1588:	3b c0       	rjmp	.+118    	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b11111111; break;
    158a:	e4 e3       	ldi	r30, 0x34	; 52
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 83       	st	Z, r24
    1592:	36 c0       	rjmp	.+108    	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b11111111; break;
    1594:	e1 e3       	ldi	r30, 0x31	; 49
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	80 83       	st	Z, r24
    159c:	31 c0       	rjmp	.+98     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>

			}
		}
		else if(Copy_u8Direction == input){
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 23       	and	r24, r24
    15a2:	71 f5       	brne	.+92     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
			switch (Copy_u8Port){
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	2b 83       	std	Y+3, r18	; 0x03
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	c9 f0       	breq	.+50     	; 0x15ea <DIO_Vid_SetPortDirection+0xca>
    15b8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ba:	3c 81       	ldd	r19, Y+4	; 0x04
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	2c f4       	brge	.+10     	; 0x15cc <DIO_Vid_SetPortDirection+0xac>
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <DIO_Vid_SetPortDirection+0xc2>
    15ca:	1a c0       	rjmp	.+52     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <DIO_Vid_SetPortDirection+0xd2>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	69 f0       	breq	.+26     	; 0x15fa <DIO_Vid_SetPortDirection+0xda>
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_A : DDRA = 0b00000000; break;
    15e2:	ea e3       	ldi	r30, 0x3A	; 58
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	10 82       	st	Z, r1
    15e8:	0b c0       	rjmp	.+22     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_B : DDRB = 0b00000000; break;
    15ea:	e7 e3       	ldi	r30, 0x37	; 55
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	10 82       	st	Z, r1
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_C : DDRC = 0b00000000; break;
    15f2:	e4 e3       	ldi	r30, 0x34	; 52
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	10 82       	st	Z, r1
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <DIO_Vid_SetPortDirection+0xe0>
				case Port_D : DDRD = 0b00000000; break;
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	10 82       	st	Z, r1

			}
		}
}
    1600:	26 96       	adiw	r28, 0x06	; 6
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <DIO_Vid_SetPortValue>:


						/*Setting port(port register) value*/
void DIO_Vid_SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value){
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <DIO_Vid_SetPortValue+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <DIO_Vid_SetPortValue+0x8>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3c 83       	std	Y+4, r19	; 0x04
    162a:	2b 83       	std	Y+3, r18	; 0x03
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	d1 f0       	breq	.+52     	; 0x166a <DIO_Vid_SetPortValue+0x58>
    1636:	2b 81       	ldd	r18, Y+3	; 0x03
    1638:	3c 81       	ldd	r19, Y+4	; 0x04
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	2c f4       	brge	.+10     	; 0x164a <DIO_Vid_SetPortValue+0x38>
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	61 f0       	breq	.+24     	; 0x1660 <DIO_Vid_SetPortValue+0x4e>
    1648:	1e c0       	rjmp	.+60     	; 0x1686 <DIO_Vid_SetPortValue+0x74>
    164a:	2b 81       	ldd	r18, Y+3	; 0x03
    164c:	3c 81       	ldd	r19, Y+4	; 0x04
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	81 f0       	breq	.+32     	; 0x1674 <DIO_Vid_SetPortValue+0x62>
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	91 05       	cpc	r25, r1
    165c:	81 f0       	breq	.+32     	; 0x167e <DIO_Vid_SetPortValue+0x6c>
    165e:	13 c0       	rjmp	.+38     	; 0x1686 <DIO_Vid_SetPortValue+0x74>

			case Port_A :   PORTA = Copy_u8Value; break;
    1660:	eb e3       	ldi	r30, 0x3B	; 59
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	80 83       	st	Z, r24
    1668:	0e c0       	rjmp	.+28     	; 0x1686 <DIO_Vid_SetPortValue+0x74>
			case Port_B :   PORTB = Copy_u8Value; break;
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	80 83       	st	Z, r24
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <DIO_Vid_SetPortValue+0x74>
			case Port_C :   PORTC = Copy_u8Value; break;
    1674:	e5 e3       	ldi	r30, 0x35	; 53
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	80 83       	st	Z, r24
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <DIO_Vid_SetPortValue+0x74>
			case Port_D :   PORTD = Copy_u8Value; break;
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	80 83       	st	Z, r24
		}
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <DIO_Vid_GetPportValue>:


						/*Getting port(PIN register) value*/
/*Getting port value, check the value of specific port and store this value into *Data */
void DIO_Vid_GetPportValue(u8 Copy_u8Port, u8 *pu8Data){
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <DIO_Vid_GetPportValue+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO_Vid_GetPportValue+0x8>
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	7b 83       	std	Y+3, r23	; 0x03
    16a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	3d 83       	std	Y+5, r19	; 0x05
    16b0:	2c 83       	std	Y+4, r18	; 0x04
    16b2:	8c 81       	ldd	r24, Y+4	; 0x04
    16b4:	9d 81       	ldd	r25, Y+5	; 0x05
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	e1 f0       	breq	.+56     	; 0x16f4 <DIO_Vid_GetPportValue+0x60>
    16bc:	2c 81       	ldd	r18, Y+4	; 0x04
    16be:	3d 81       	ldd	r19, Y+5	; 0x05
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <DIO_Vid_GetPportValue+0x3c>
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	61 f0       	breq	.+24     	; 0x16e6 <DIO_Vid_GetPportValue+0x52>
    16ce:	26 c0       	rjmp	.+76     	; 0x171c <DIO_Vid_GetPportValue+0x88>
    16d0:	2c 81       	ldd	r18, Y+4	; 0x04
    16d2:	3d 81       	ldd	r19, Y+5	; 0x05
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	a1 f0       	breq	.+40     	; 0x1702 <DIO_Vid_GetPportValue+0x6e>
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
    16dc:	9d 81       	ldd	r25, Y+5	; 0x05
    16de:	83 30       	cpi	r24, 0x03	; 3
    16e0:	91 05       	cpc	r25, r1
    16e2:	b1 f0       	breq	.+44     	; 0x1710 <DIO_Vid_GetPportValue+0x7c>
    16e4:	1b c0       	rjmp	.+54     	; 0x171c <DIO_Vid_GetPportValue+0x88>

			case Port_A : *pu8Data = PORTA; break;
    16e6:	eb e3       	ldi	r30, 0x3B	; 59
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	ea 81       	ldd	r30, Y+2	; 0x02
    16ee:	fb 81       	ldd	r31, Y+3	; 0x03
    16f0:	80 83       	st	Z, r24
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <DIO_Vid_GetPportValue+0x88>
			case Port_B : *pu8Data = PORTB; break;
    16f4:	e8 e3       	ldi	r30, 0x38	; 56
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	ea 81       	ldd	r30, Y+2	; 0x02
    16fc:	fb 81       	ldd	r31, Y+3	; 0x03
    16fe:	80 83       	st	Z, r24
    1700:	0d c0       	rjmp	.+26     	; 0x171c <DIO_Vid_GetPportValue+0x88>
			case Port_C : *pu8Data = PORTC; break;
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	ea 81       	ldd	r30, Y+2	; 0x02
    170a:	fb 81       	ldd	r31, Y+3	; 0x03
    170c:	80 83       	st	Z, r24
    170e:	06 c0       	rjmp	.+12     	; 0x171c <DIO_Vid_GetPportValue+0x88>
			case Port_D : *pu8Data = PORTD; break;
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	ea 81       	ldd	r30, Y+2	; 0x02
    1718:	fb 81       	ldd	r31, Y+3	; 0x03
    171a:	80 83       	st	Z, r24
		}

}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <DIO_ConnectedPullUp>:

void DIO_ConnectedPullUp(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8ConnectedPullup){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_ConnectedPullUp+0x6>
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	6a 83       	std	Y+2, r22	; 0x02
    173c:	4b 83       	std	Y+3, r20	; 0x03

}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <LCD_vid_SendData>:
#include "LCD_Interface.h"
#include "LCD_Private.h"



void LCD_vid_SendData(u8 Copy_u8Data){
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	2f 97       	sbiw	r28, 0x0f	; 15
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinHigh);    //RS=1        DATA SHEAT
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	65 e0       	ldi	r22, 0x05	; 5
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);     //RW=0
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	66 e0       	ldi	r22, 0x06	; 6
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Data);
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	6f 85       	ldd	r22, Y+15	; 0x0f
    1778:	0e 94 09 0b 	call	0x1612	; 0x1612 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);     //E=1&0
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	67 e0       	ldi	r22, 0x07	; 7
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a0 e4       	ldi	r26, 0x40	; 64
    178c:	b0 e4       	ldi	r27, 0x40	; 64
    178e:	8b 87       	std	Y+11, r24	; 0x0b
    1790:	9c 87       	std	Y+12, r25	; 0x0c
    1792:	ad 87       	std	Y+13, r26	; 0x0d
    1794:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1796:	6b 85       	ldd	r22, Y+11	; 0x0b
    1798:	7c 85       	ldd	r23, Y+12	; 0x0c
    179a:	8d 85       	ldd	r24, Y+13	; 0x0d
    179c:	9e 85       	ldd	r25, Y+14	; 0x0e
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	4a ef       	ldi	r20, 0xFA	; 250
    17a4:	54 e4       	ldi	r21, 0x44	; 68
    17a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17aa:	dc 01       	movw	r26, r24
    17ac:	cb 01       	movw	r24, r22
    17ae:	8f 83       	std	Y+7, r24	; 0x07
    17b0:	98 87       	std	Y+8, r25	; 0x08
    17b2:	a9 87       	std	Y+9, r26	; 0x09
    17b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <LCD_vid_SendData+0x8e>
		__ticks = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9e 83       	std	Y+6, r25	; 0x06
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	3f c0       	rjmp	.+126    	; 0x1856 <LCD_vid_SendData+0x10c>
	else if (__tmp > 65535)
    17d8:	6f 81       	ldd	r22, Y+7	; 0x07
    17da:	78 85       	ldd	r23, Y+8	; 0x08
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	3f ef       	ldi	r19, 0xFF	; 255
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	57 e4       	ldi	r21, 0x47	; 71
    17e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	4c f5       	brge	.+82     	; 0x1842 <LCD_vid_SendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	51 e4       	ldi	r21, 0x41	; 65
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	0f c0       	rjmp	.+30     	; 0x1838 <LCD_vid_SendData+0xee>
    181a:	88 ec       	ldi	r24, 0xC8	; 200
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	f1 f7       	brne	.-4      	; 0x1826 <LCD_vid_SendData+0xdc>
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	69 f7       	brne	.-38     	; 0x181a <LCD_vid_SendData+0xd0>
    1840:	14 c0       	rjmp	.+40     	; 0x186a <LCD_vid_SendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1842:	6f 81       	ldd	r22, Y+7	; 0x07
    1844:	78 85       	ldd	r23, Y+8	; 0x08
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_vid_SendData+0x118>
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	67 e0       	ldi	r22, 0x07	; 7
    186e:	40 e0       	ldi	r20, 0x00	; 0
    1870:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>

}
    1874:	2f 96       	adiw	r28, 0x0f	; 15
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <LCD_vid_SendCmd>:

void LCD_vid_SendCmd(u8 Copy_u8Cmd){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	2f 97       	sbiw	r28, 0x0f	; 15
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	8f 87       	std	Y+15, r24	; 0x0f

	DIO_Vid_SetPinValue(CONTROL_PORT, RS_PIN,PinLow);   //RS=0        DATA SHEAT
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	65 e0       	ldi	r22, 0x05	; 5
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, RW_PIN,PinLow);   //RW=0
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	66 e0       	ldi	r22, 0x06	; 6
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPortValue(DATA_PORT, Copy_u8Cmd);
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    18b4:	0e 94 09 0b 	call	0x1612	; 0x1612 <DIO_Vid_SetPortValue>
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinHigh);    //E=1&0
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	67 e0       	ldi	r22, 0x07	; 7
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e4       	ldi	r26, 0x40	; 64
    18c8:	b0 e4       	ldi	r27, 0x40	; 64
    18ca:	8b 87       	std	Y+11, r24	; 0x0b
    18cc:	9c 87       	std	Y+12, r25	; 0x0c
    18ce:	ad 87       	std	Y+13, r26	; 0x0d
    18d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a ef       	ldi	r20, 0xFA	; 250
    18e0:	54 e4       	ldi	r21, 0x44	; 68
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8f 83       	std	Y+7, r24	; 0x07
    18ec:	98 87       	std	Y+8, r25	; 0x08
    18ee:	a9 87       	std	Y+9, r26	; 0x09
    18f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <LCD_vid_SendCmd+0x8e>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <LCD_vid_SendCmd+0x10c>
	else if (__tmp > 65535)
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <LCD_vid_SendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6b 85       	ldd	r22, Y+11	; 0x0b
    192e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1930:	8d 85       	ldd	r24, Y+13	; 0x0d
    1932:	9e 85       	ldd	r25, Y+14	; 0x0e
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <LCD_vid_SendCmd+0xee>
    1956:	88 ec       	ldi	r24, 0xC8	; 200
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_vid_SendCmd+0xdc>
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <LCD_vid_SendCmd+0xd0>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <LCD_vid_SendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_vid_SendCmd+0x118>
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	DIO_Vid_SetPinValue(CONTROL_PORT, E_PIN,PinLow);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	67 e0       	ldi	r22, 0x07	; 7
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>

}
    19b0:	2f 96       	adiw	r28, 0x0f	; 15
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <LCD_Vid_Init>:

void LCD_Vid_Init(void){
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	6c 97       	sbiw	r28, 0x1c	; 28
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a0 e2       	ldi	r26, 0x20	; 32
    19dc:	b2 e4       	ldi	r27, 0x42	; 66
    19de:	89 8f       	std	Y+25, r24	; 0x19
    19e0:	9a 8f       	std	Y+26, r25	; 0x1a
    19e2:	ab 8f       	std	Y+27, r26	; 0x1b
    19e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e6:	69 8d       	ldd	r22, Y+25	; 0x19
    19e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a ef       	ldi	r20, 0xFA	; 250
    19f4:	54 e4       	ldi	r21, 0x44	; 68
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8d 8b       	std	Y+21, r24	; 0x15
    1a00:	9e 8b       	std	Y+22, r25	; 0x16
    1a02:	af 8b       	std	Y+23, r26	; 0x17
    1a04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e8       	ldi	r20, 0x80	; 128
    1a14:	5f e3       	ldi	r21, 0x3F	; 63
    1a16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1a:	88 23       	and	r24, r24
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <LCD_Vid_Init+0x66>
		__ticks = 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <LCD_Vid_Init+0xe4>
	else if (__tmp > 65535)
    1a28:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	3f ef       	ldi	r19, 0xFF	; 255
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	57 e4       	ldi	r21, 0x47	; 71
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3c:	18 16       	cp	r1, r24
    1a3e:	4c f5       	brge	.+82     	; 0x1a92 <LCD_Vid_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a40:	69 8d       	ldd	r22, Y+25	; 0x19
    1a42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	51 e4       	ldi	r21, 0x41	; 65
    1a50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	bc 01       	movw	r22, r24
    1a5a:	cd 01       	movw	r24, r26
    1a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9c 8b       	std	Y+20, r25	; 0x14
    1a66:	8b 8b       	std	Y+19, r24	; 0x13
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <LCD_Vid_Init+0xc6>
    1a6a:	88 ec       	ldi	r24, 0xC8	; 200
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9a 8b       	std	Y+18, r25	; 0x12
    1a70:	89 8b       	std	Y+17, r24	; 0x11
    1a72:	89 89       	ldd	r24, Y+17	; 0x11
    1a74:	9a 89       	ldd	r25, Y+18	; 0x12
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <LCD_Vid_Init+0xb4>
    1a7a:	9a 8b       	std	Y+18, r25	; 0x12
    1a7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a80:	9c 89       	ldd	r25, Y+20	; 0x14
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	69 f7       	brne	.-38     	; 0x1a6a <LCD_Vid_Init+0xa8>
    1a90:	14 c0       	rjmp	.+40     	; 0x1aba <LCD_Vid_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	6d 89       	ldd	r22, Y+21	; 0x15
    1a94:	7e 89       	ldd	r23, Y+22	; 0x16
    1a96:	8f 89       	ldd	r24, Y+23	; 0x17
    1a98:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aaa:	98 8b       	std	Y+16, r25	; 0x10
    1aac:	8f 87       	std	Y+15, r24	; 0x0f
    1aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab0:	98 89       	ldd	r25, Y+16	; 0x10
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <LCD_Vid_Init+0xf0>
    1ab6:	98 8b       	std	Y+16, r25	; 0x10
    1ab8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	LCD_vid_SendCmd(0b00111100);
    1aba:	8c e3       	ldi	r24, 0x3C	; 60
    1abc:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a0 e8       	ldi	r26, 0x80	; 128
    1ac6:	bf e3       	ldi	r27, 0x3F	; 63
    1ac8:	8b 87       	std	Y+11, r24	; 0x0b
    1aca:	9c 87       	std	Y+12, r25	; 0x0c
    1acc:	ad 87       	std	Y+13, r26	; 0x0d
    1ace:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a ef       	ldi	r20, 0xFA	; 250
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	8f 83       	std	Y+7, r24	; 0x07
    1aea:	98 87       	std	Y+8, r25	; 0x08
    1aec:	a9 87       	std	Y+9, r26	; 0x09
    1aee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_Vid_Init+0x150>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	3f c0       	rjmp	.+126    	; 0x1b90 <LCD_Vid_Init+0x1ce>
	else if (__tmp > 65535)
    1b12:	6f 81       	ldd	r22, Y+7	; 0x07
    1b14:	78 85       	ldd	r23, Y+8	; 0x08
    1b16:	89 85       	ldd	r24, Y+9	; 0x09
    1b18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	4c f5       	brge	.+82     	; 0x1b7c <LCD_Vid_Init+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <LCD_Vid_Init+0x1b0>
    1b54:	88 ec       	ldi	r24, 0xC8	; 200
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_Vid_Init+0x19e>
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8d 81       	ldd	r24, Y+5	; 0x05
    1b74:	9e 81       	ldd	r25, Y+6	; 0x06
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <LCD_Vid_Init+0x192>
    1b7a:	14 c0       	rjmp	.+40     	; 0x1ba4 <LCD_Vid_Init+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7e:	78 85       	ldd	r23, Y+8	; 0x08
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_Vid_Init+0x1da>
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	LCD_vid_SendCmd(0b00001100);
    1ba4:	8c e0       	ldi	r24, 0x0C	; 12
    1ba6:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>

	LCD_vid_SendCmd(1);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>

}
    1bb0:	6c 96       	adiw	r28, 0x1c	; 28
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <LCD_vid_DisplayClear>:

void LCD_vid_DisplayClear(){
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	LCD_vid_SendCmd(1);
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <LCD_vid_GoTo>:
void LCD_vid_GoTo(u8 Copy_u8X,u8 Copy_u8Y){
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <LCD_vid_GoTo+0x6>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8X==1){
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <LCD_vid_GoTo+0x1a>
		Copy_u8Y +=0x40;
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	80 5c       	subi	r24, 0xC0	; 192
    1bee:	8a 83       	std	Y+2, r24	; 0x02
	}

	LCD_vid_SendCmd(Copy_u8Y+0b10000000);       //the place which i want go to in DDRAM//
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	80 58       	subi	r24, 0x80	; 128
    1bf4:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_VidSendSpecaialChar>:

//x=0for first line and 1 for secondline
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	27 97       	sbiw	r28, 0x07	; 7
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	6d 83       	std	Y+5, r22	; 0x05
    1c1c:	4e 83       	std	Y+6, r20	; 0x06
    1c1e:	2f 83       	std	Y+7, r18	; 0x07

u8 Local_Adress=8*Pattern_Num;
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	8a 83       	std	Y+2, r24	; 0x02
LCD_vid_SendCmd(0b01000000+Local_Adress);
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	80 5c       	subi	r24, 0xC0	; 192
    1c38:	0e 94 43 0c 	call	0x1886	; 0x1886 <LCD_vid_SendCmd>
for(u8 i=0;i<8;i++){
    1c3c:	19 82       	std	Y+1, r1	; 0x01
    1c3e:	0e c0       	rjmp	.+28     	; 0x1c5c <LCD_VidSendSpecaialChar+0x5a>
	LCD_vid_SendData(Pattern[i]);
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f3 1f       	adc	r31, r19
    1c50:	80 81       	ld	r24, Z
    1c52:	0e 94 a5 0b 	call	0x174a	; 0x174a <LCD_vid_SendData>
//y=0--->16
void LCD_VidSendSpecaialChar(u8 *Pattern,u8 Pattern_Num,u8 Copy_u8XPos,u8 Copy_u8YPos){

u8 Local_Adress=8*Pattern_Num;
LCD_vid_SendCmd(0b01000000+Local_Adress);
for(u8 i=0;i<8;i++){
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	8f 5f       	subi	r24, 0xFF	; 255
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	89 81       	ldd	r24, Y+1	; 0x01
    1c5e:	88 30       	cpi	r24, 0x08	; 8
    1c60:	78 f3       	brcs	.-34     	; 0x1c40 <LCD_VidSendSpecaialChar+0x3e>
	LCD_vid_SendData(Pattern[i]);
}
LCD_vid_GoTo(Copy_u8XPos,Copy_u8YPos);
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
LCD_vid_SendData(Pattern_Num);
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	0e 94 a5 0b 	call	0x174a	; 0x174a <LCD_vid_SendData>
}
    1c70:	27 96       	adiw	r28, 0x07	; 7
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <LCD_vid_SendInt>:


void LCD_vid_SendInt(u32 Copy_u8Number){
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <LCD_vid_SendInt+0x6>
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Number!=0){
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <LCD_vid_SendInt+0x3e>
		LCD_vid_SendInt(Copy_u8Number/10);
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	b9 01       	movw	r22, r18
    1ca2:	0e 94 2c 13 	call	0x2658	; 0x2658 <__udivmodhi4>
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <LCD_vid_SendInt>
		LCD_vid_SendData((Copy_u8Number%10)+48);
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	0e 94 2c 13 	call	0x2658	; 0x2658 <__udivmodhi4>
    1cba:	80 5d       	subi	r24, 0xD0	; 208
    1cbc:	0e 94 a5 0b 	call	0x174a	; 0x174a <LCD_vid_SendData>


	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <LCD_vid_SendString>:


void LCD_vid_SendString(const s8 *Copy_ps8string){
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <LCD_vid_SendString+0x6>
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	0a c0       	rjmp	.+20     	; 0x1cee <LCD_vid_SendString+0x24>

	while(*Copy_ps8string!='\0'){

		LCD_vid_SendData(*Copy_ps8string);
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	80 81       	ld	r24, Z
    1ce0:	0e 94 a5 0b 	call	0x174a	; 0x174a <LCD_vid_SendData>
		Copy_ps8string++;
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vid_SendString(const s8 *Copy_ps8string){

	while(*Copy_ps8string!='\0'){
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	89 f7       	brne	.-30     	; 0x1cda <LCD_vid_SendString+0x10>
		LCD_vid_SendData(*Copy_ps8string);
		Copy_ps8string++;
	}


}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <Keypad_Init>:
/*************************************DELAY*******************************/
#include <util/delay.h>



void Keypad_Init() {
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	//DIO_Vid_SetPortDirection(Port_B,output);   //Column output:only the first 4 bins
	DIO_Vid_SetPinDirection(Port_B,pin0,output);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin1,output);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin2,output);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_B,pin3,output);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>


  //  DIO_Vid_SetPortDirection(Port_A,input);    //Row input pull up: only the first 4 bins
	DIO_Vid_SetPinDirection(Port_A,pin0,input);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin1,input);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	61 e0       	ldi	r22, 0x01	; 1
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin2,input);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin3,input);
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	63 e0       	ldi	r22, 0x03	; 3
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>

    DIO_Vid_SetPortValue(Port_A,0b00001111);         //pullup
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	6f e0       	ldi	r22, 0x0F	; 15
    1d5e:	0e 94 09 0b 	call	0x1612	; 0x1612 <DIO_Vid_SetPortValue>

}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <Keypad_u8GetPressedKey>:

u8 Keypad_u8GetPressedKey(){
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	a8 97       	sbiw	r28, 0x28	; 40
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
		u8 Keypad_Arr[4][4]={ {'7','8','9','/'} ,{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'} };
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	42 96       	adiw	r24, 0x12	; 18
    1d80:	9d a3       	std	Y+37, r25	; 0x25
    1d82:	8c a3       	std	Y+36, r24	; 0x24
    1d84:	e6 eb       	ldi	r30, 0xB6	; 182
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	ff a3       	std	Y+39, r31	; 0x27
    1d8a:	ee a3       	std	Y+38, r30	; 0x26
    1d8c:	f0 e1       	ldi	r31, 0x10	; 16
    1d8e:	f8 a7       	std	Y+40, r31	; 0x28
    1d90:	ee a1       	ldd	r30, Y+38	; 0x26
    1d92:	ff a1       	ldd	r31, Y+39	; 0x27
    1d94:	00 80       	ld	r0, Z
    1d96:	8e a1       	ldd	r24, Y+38	; 0x26
    1d98:	9f a1       	ldd	r25, Y+39	; 0x27
    1d9a:	01 96       	adiw	r24, 0x01	; 1
    1d9c:	9f a3       	std	Y+39, r25	; 0x27
    1d9e:	8e a3       	std	Y+38, r24	; 0x26
    1da0:	ec a1       	ldd	r30, Y+36	; 0x24
    1da2:	fd a1       	ldd	r31, Y+37	; 0x25
    1da4:	00 82       	st	Z, r0
    1da6:	8c a1       	ldd	r24, Y+36	; 0x24
    1da8:	9d a1       	ldd	r25, Y+37	; 0x25
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	9d a3       	std	Y+37, r25	; 0x25
    1dae:	8c a3       	std	Y+36, r24	; 0x24
    1db0:	98 a5       	ldd	r25, Y+40	; 0x28
    1db2:	91 50       	subi	r25, 0x01	; 1
    1db4:	98 a7       	std	Y+40, r25	; 0x28
    1db6:	e8 a5       	ldd	r30, Y+40	; 0x28
    1db8:	ee 23       	and	r30, r30
    1dba:	51 f7       	brne	.-44     	; 0x1d90 <Keypad_u8GetPressedKey+0x28>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    1dbc:	18 8a       	std	Y+16, r1	; 0x10
    1dbe:	d3 c0       	rjmp	.+422    	; 0x1f66 <Keypad_u8GetPressedKey+0x1fe>
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
    1dc0:	88 89       	ldd	r24, Y+16	; 0x10
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 55       	subi	r30, 0x52	; 82
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	90 81       	ld	r25, Z
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	69 2f       	mov	r22, r25
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    1dd8:	1f 86       	std	Y+15, r1	; 0x0f
    1dda:	b2 c0       	rjmp	.+356    	; 0x1f40 <Keypad_u8GetPressedKey+0x1d8>
		    {
		      DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	fc 01       	movw	r30, r24
    1de4:	ee 54       	subi	r30, 0x4E	; 78
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	90 81       	ld	r25, Z
    1dea:	9e 01       	movw	r18, r28
    1dec:	2e 5d       	subi	r18, 0xDE	; 222
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	69 2f       	mov	r22, r25
    1df4:	a9 01       	movw	r20, r18
    1df6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DIO_Vid_GetPinValue>
		      /*check pin value equal to zero or not */
		      if(DataInput==0)
    1dfa:	8a a1       	ldd	r24, Y+34	; 0x22
    1dfc:	88 23       	and	r24, r24
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <Keypad_u8GetPressedKey+0x9a>
    1e00:	9c c0       	rjmp	.+312    	; 0x1f3a <Keypad_u8GetPressedKey+0x1d2>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a8 e4       	ldi	r26, 0x48	; 72
    1e08:	b3 e4       	ldi	r27, 0x43	; 67
    1e0a:	8b 87       	std	Y+11, r24	; 0x0b
    1e0c:	9c 87       	std	Y+12, r25	; 0x0c
    1e0e:	ad 87       	std	Y+13, r26	; 0x0d
    1e10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	4a ef       	ldi	r20, 0xFA	; 250
    1e20:	54 e4       	ldi	r21, 0x44	; 68
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8f 83       	std	Y+7, r24	; 0x07
    1e2c:	98 87       	std	Y+8, r25	; 0x08
    1e2e:	a9 87       	std	Y+9, r26	; 0x09
    1e30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e32:	6f 81       	ldd	r22, Y+7	; 0x07
    1e34:	78 85       	ldd	r23, Y+8	; 0x08
    1e36:	89 85       	ldd	r24, Y+9	; 0x09
    1e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	2c f4       	brge	.+10     	; 0x1e54 <Keypad_u8GetPressedKey+0xec>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
    1e52:	3f c0       	rjmp	.+126    	; 0x1ed2 <Keypad_u8GetPressedKey+0x16a>
	else if (__tmp > 65535)
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	78 85       	ldd	r23, Y+8	; 0x08
    1e58:	89 85       	ldd	r24, Y+9	; 0x09
    1e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	3f ef       	ldi	r19, 0xFF	; 255
    1e60:	4f e7       	ldi	r20, 0x7F	; 127
    1e62:	57 e4       	ldi	r21, 0x47	; 71
    1e64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e68:	18 16       	cp	r1, r24
    1e6a:	4c f5       	brge	.+82     	; 0x1ebe <Keypad_u8GetPressedKey+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <Keypad_u8GetPressedKey+0x14c>
    1e96:	88 ec       	ldi	r24, 0xC8	; 200
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 83       	std	Y+4, r25	; 0x04
    1e9c:	8b 83       	std	Y+3, r24	; 0x03
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	f1 f7       	brne	.-4      	; 0x1ea2 <Keypad_u8GetPressedKey+0x13a>
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	69 f7       	brne	.-38     	; 0x1e96 <Keypad_u8GetPressedKey+0x12e>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <Keypad_u8GetPressedKey+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec0:	78 85       	ldd	r23, Y+8	; 0x08
    1ec2:	89 85       	ldd	r24, Y+9	; 0x09
    1ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9e 83       	std	Y+6, r25	; 0x06
    1ed0:	8d 83       	std	Y+5, r24	; 0x05
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <Keypad_u8GetPressedKey+0x176>
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];
    1ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	88 89       	ldd	r24, Y+16	; 0x10
    1eee:	48 2f       	mov	r20, r24
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	82 0f       	add	r24, r18
    1f00:	93 1f       	adc	r25, r19
    1f02:	84 0f       	add	r24, r20
    1f04:	95 1f       	adc	r25, r21
    1f06:	fc 01       	movw	r30, r24
    1f08:	71 96       	adiw	r30, 0x11	; 17
    1f0a:	80 81       	ld	r24, Z
    1f0c:	89 8b       	std	Y+17, r24	; 0x11
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <Keypad_u8GetPressedKey+0x1c6>

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
    1f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	fc 01       	movw	r30, r24
    1f18:	ee 54       	subi	r30, 0x4E	; 78
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	90 81       	ld	r25, Z
    1f1e:	9e 01       	movw	r18, r28
    1f20:	2e 5d       	subi	r18, 0xDE	; 222
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	69 2f       	mov	r22, r25
    1f28:	a9 01       	movw	r20, r18
    1f2a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DIO_Vid_GetPinValue>
		        {  /* store the asci value of pressed key */
		    	  _delay_ms(200);
		    	PressedKey=Keypad_Arr[Row][Col];

		      /* keep storing the asci value of pressed key if the key was still pressing */
		      while(DataInput==0)
    1f2e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f30:	88 23       	and	r24, r24
    1f32:	71 f3       	breq	.-36     	; 0x1f10 <Keypad_u8GetPressedKey+0x1a8>
		           {
		    	  DIO_Vid_GetPinValue(KEYPAD_ROW_PORT,Row_Arr[Row],&DataInput);   /* return the pressed key value to be displayed on lcd or stored*/
		           }

		      return PressedKey;
    1f34:	f9 89       	ldd	r31, Y+17	; 0x11
    1f36:	fb a3       	std	Y+35, r31	; 0x23
    1f38:	1c c0       	rjmp	.+56     	; 0x1f72 <Keypad_u8GetPressedKey+0x20a>


	 for(Col=0;Col<4;Col++)
		 {   DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinLow);
		/*check the input of rows pins if one of key was pressed while col(0)is ground then the input value will be gnd */
		    for(Row=0;Row<4;Row++)
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	8f 87       	std	Y+15, r24	; 0x0f
    1f40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <Keypad_u8GetPressedKey+0x1e0>
    1f46:	4a cf       	rjmp	.-364    	; 0x1ddc <Keypad_u8GetPressedKey+0x74>
		           }

		      return PressedKey;
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
    1f48:	88 89       	ldd	r24, Y+16	; 0x10
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e2 55       	subi	r30, 0x52	; 82
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	90 81       	ld	r25, Z
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	69 2f       	mov	r22, r25
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
		u8 PressedKey;
		u8 DataInput,Col,Row;
		              /*set one of cols to gnd */


	 for(Col=0;Col<4;Col++)
    1f60:	88 89       	ldd	r24, Y+16	; 0x10
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	88 8b       	std	Y+16, r24	; 0x10
    1f66:	88 89       	ldd	r24, Y+16	; 0x10
    1f68:	84 30       	cpi	r24, 0x04	; 4
    1f6a:	08 f4       	brcc	.+2      	; 0x1f6e <Keypad_u8GetPressedKey+0x206>
    1f6c:	29 cf       	rjmp	.-430    	; 0x1dc0 <Keypad_u8GetPressedKey+0x58>
		        }
		    }
		    DIO_Vid_SetPinValue(KEYPAD_COL_PORT, Col_Arr[Col],PinHigh);
		 }
		/* if there is no key is pressed return message '101'return '0';*/
	return 101;
    1f6e:	85 e6       	ldi	r24, 0x65	; 101
    1f70:	8b a3       	std	Y+35, r24	; 0x23
    1f72:	8b a1       	ldd	r24, Y+35	; 0x23
	// return PressedKey;
	  }
    1f74:	a8 96       	adiw	r28, 0x28	; 40
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <Handle_EXTI0>:
#include <util/delay.h>




void Handle_EXTI0(void){
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
	             /*light of first four LEDs in PORTC for 3 seconds*/
   GIE_VidEn();
    1f9a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_VidEn>
	LCD_vid_DisplayClear();
    1f9e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_vid_DisplayClear>
	LCD_vid_GoTo(0,3);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	63 e0       	ldi	r22, 0x03	; 3
    1fa6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome!");
    1faa:	80 e6       	ldi	r24, 0x60	; 96
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	LCD_vid_GoTo(1,0);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("EXTI 0 Handle..");
    1fba:	89 e6       	ldi	r24, 0x69	; 105
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	DIO_Vid_SetPinValue(Port_C,pin0,PinHigh);
    1fc2:	82 e0       	ldi	r24, 0x02	; 2
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin1,PinHigh);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin2,PinHigh);
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	62 e0       	ldi	r22, 0x02	; 2
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin3,PinHigh);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	63 e0       	ldi	r22, 0x03	; 3
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	aa ef       	ldi	r26, 0xFA	; 250
    1ff0:	b4 e4       	ldi	r27, 0x44	; 68
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <Handle_EXTI0+0xb6>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <Handle_EXTI0+0x134>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <Handle_EXTI0+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <Handle_EXTI0+0x116>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <Handle_EXTI0+0x104>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <Handle_EXTI0+0xf8>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <Handle_EXTI0+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <Handle_EXTI0+0x140>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2000);

	DIO_Vid_SetPinValue(Port_C,pin0,PinLow);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	60 e0       	ldi	r22, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin1,PinLow);
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin2,PinLow);
    20e2:	82 e0       	ldi	r24, 0x02	; 2
    20e4:	62 e0       	ldi	r22, 0x02	; 2
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	DIO_Vid_SetPinValue(Port_C,pin3,PinLow);
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	63 e0       	ldi	r22, 0x03	; 3
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>

	LCD_vid_DisplayClear();
    20f6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_vid_DisplayClear>

		}
		*/
//LCD_vid_DisplayClear();

}
    20fa:	2e 96       	adiw	r28, 0x0e	; 14
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <Handle_EXTI1>:

void Handle_EXTI1(void){
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	e8 97       	sbiw	r28, 0x38	; 56
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
	             /* flash of Second four LEDs in PORTC every 0.7 second */

	/* enable global interrupt */
	GIE_VidEn();
    2120:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_VidEn>

	/*clear EXTI 1 flag */
	SET_BIT(GIFR, GIFR_INTF1);
    2124:	aa e5       	ldi	r26, 0x5A	; 90
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	ea e5       	ldi	r30, 0x5A	; 90
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	8c 93       	st	X, r24

		LCD_vid_DisplayClear();
    2132:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_vid_DisplayClear>
		LCD_vid_GoTo(0,3);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	63 e0       	ldi	r22, 0x03	; 3
    213a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
		LCD_vid_SendString("Welcome!");
    213e:	80 e6       	ldi	r24, 0x60	; 96
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
		LCD_vid_GoTo(1,0);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
		LCD_vid_SendString("EXTI 1 Handle..");
    214e:	89 e7       	ldi	r24, 0x79	; 121
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>


	DIO_Vid_SetPinValue(Port_C,pin0,PinHigh);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	aa e7       	ldi	r26, 0x7A	; 122
    2166:	b4 e4       	ldi	r27, 0x44	; 68
    2168:	8d ab       	std	Y+53, r24	; 0x35
    216a:	9e ab       	std	Y+54, r25	; 0x36
    216c:	af ab       	std	Y+55, r26	; 0x37
    216e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6d a9       	ldd	r22, Y+53	; 0x35
    2172:	7e a9       	ldd	r23, Y+54	; 0x36
    2174:	8f a9       	ldd	r24, Y+55	; 0x37
    2176:	98 ad       	ldd	r25, Y+56	; 0x38
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	89 ab       	std	Y+49, r24	; 0x31
    218a:	9a ab       	std	Y+50, r25	; 0x32
    218c:	ab ab       	std	Y+51, r26	; 0x33
    218e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2190:	69 a9       	ldd	r22, Y+49	; 0x31
    2192:	7a a9       	ldd	r23, Y+50	; 0x32
    2194:	8b a9       	ldd	r24, Y+51	; 0x33
    2196:	9c a9       	ldd	r25, Y+52	; 0x34
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <Handle_EXTI1+0xa6>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	98 ab       	std	Y+48, r25	; 0x30
    21ae:	8f a7       	std	Y+47, r24	; 0x2f
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <Handle_EXTI1+0x124>
	else if (__tmp > 65535)
    21b2:	69 a9       	ldd	r22, Y+49	; 0x31
    21b4:	7a a9       	ldd	r23, Y+50	; 0x32
    21b6:	8b a9       	ldd	r24, Y+51	; 0x33
    21b8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <Handle_EXTI1+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6d a9       	ldd	r22, Y+53	; 0x35
    21cc:	7e a9       	ldd	r23, Y+54	; 0x36
    21ce:	8f a9       	ldd	r24, Y+55	; 0x37
    21d0:	98 ad       	ldd	r25, Y+56	; 0x38
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	98 ab       	std	Y+48, r25	; 0x30
    21f0:	8f a7       	std	Y+47, r24	; 0x2f
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <Handle_EXTI1+0x106>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e a7       	std	Y+46, r25	; 0x2e
    21fa:	8d a7       	std	Y+45, r24	; 0x2d
    21fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <Handle_EXTI1+0xf4>
    2204:	9e a7       	std	Y+46, r25	; 0x2e
    2206:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8f a5       	ldd	r24, Y+47	; 0x2f
    220a:	98 a9       	ldd	r25, Y+48	; 0x30
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <Handle_EXTI1+0xe8>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <Handle_EXTI1+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	98 ab       	std	Y+48, r25	; 0x30
    222e:	8f a7       	std	Y+47, r24	; 0x2f
    2230:	8f a5       	ldd	r24, Y+47	; 0x2f
    2232:	98 a9       	ldd	r25, Y+48	; 0x30
    2234:	9c a7       	std	Y+44, r25	; 0x2c
    2236:	8b a7       	std	Y+43, r24	; 0x2b
    2238:	8b a5       	ldd	r24, Y+43	; 0x2b
    223a:	9c a5       	ldd	r25, Y+44	; 0x2c
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <Handle_EXTI1+0x130>
    2240:	9c a7       	std	Y+44, r25	; 0x2c
    2242:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	DIO_Vid_SetPinValue(Port_C,pin0,PinLow);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>

	LCD_vid_GoTo(0,3);
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	63 e0       	ldi	r22, 0x03	; 3
    2252:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome!");
    2256:	80 e6       	ldi	r24, 0x60	; 96
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	LCD_vid_GoTo(1,0);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("EXTI 1 Handle..");
    2266:	89 e7       	ldi	r24, 0x79	; 121
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>

	DIO_Vid_SetPinValue(Port_C,pin1,PinHigh);
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	aa e7       	ldi	r26, 0x7A	; 122
    227e:	b4 e4       	ldi	r27, 0x44	; 68
    2280:	8f a3       	std	Y+39, r24	; 0x27
    2282:	98 a7       	std	Y+40, r25	; 0x28
    2284:	a9 a7       	std	Y+41, r26	; 0x29
    2286:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	6f a1       	ldd	r22, Y+39	; 0x27
    228a:	78 a5       	ldd	r23, Y+40	; 0x28
    228c:	89 a5       	ldd	r24, Y+41	; 0x29
    228e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8b a3       	std	Y+35, r24	; 0x23
    22a2:	9c a3       	std	Y+36, r25	; 0x24
    22a4:	ad a3       	std	Y+37, r26	; 0x25
    22a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a8:	6b a1       	ldd	r22, Y+35	; 0x23
    22aa:	7c a1       	ldd	r23, Y+36	; 0x24
    22ac:	8d a1       	ldd	r24, Y+37	; 0x25
    22ae:	9e a1       	ldd	r25, Y+38	; 0x26
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	2c f4       	brge	.+10     	; 0x22ca <Handle_EXTI1+0x1be>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9a a3       	std	Y+34, r25	; 0x22
    22c6:	89 a3       	std	Y+33, r24	; 0x21
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <Handle_EXTI1+0x23c>
	else if (__tmp > 65535)
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	4c f5       	brge	.+82     	; 0x2334 <Handle_EXTI1+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e2:	6f a1       	ldd	r22, Y+39	; 0x27
    22e4:	78 a5       	ldd	r23, Y+40	; 0x28
    22e6:	89 a5       	ldd	r24, Y+41	; 0x29
    22e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	0f c0       	rjmp	.+30     	; 0x232a <Handle_EXTI1+0x21e>
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	98 a3       	std	Y+32, r25	; 0x20
    2312:	8f 8f       	std	Y+31, r24	; 0x1f
    2314:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2316:	98 a1       	ldd	r25, Y+32	; 0x20
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <Handle_EXTI1+0x20c>
    231c:	98 a3       	std	Y+32, r25	; 0x20
    231e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	9a a1       	ldd	r25, Y+34	; 0x22
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9a a3       	std	Y+34, r25	; 0x22
    2328:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232a:	89 a1       	ldd	r24, Y+33	; 0x21
    232c:	9a a1       	ldd	r25, Y+34	; 0x22
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <Handle_EXTI1+0x200>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <Handle_EXTI1+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2334:	6b a1       	ldd	r22, Y+35	; 0x23
    2336:	7c a1       	ldd	r23, Y+36	; 0x24
    2338:	8d a1       	ldd	r24, Y+37	; 0x25
    233a:	9e a1       	ldd	r25, Y+38	; 0x26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	89 a1       	ldd	r24, Y+33	; 0x21
    234a:	9a a1       	ldd	r25, Y+34	; 0x22
    234c:	9e 8f       	std	Y+30, r25	; 0x1e
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
    2350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2352:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <Handle_EXTI1+0x248>
    2358:	9e 8f       	std	Y+30, r25	; 0x1e
    235a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	DIO_Vid_SetPinValue(Port_C,pin1,PinLow);
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	LCD_vid_GoTo(0,3);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome!");
    236e:	80 e6       	ldi	r24, 0x60	; 96
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	LCD_vid_GoTo(1,0);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("EXTI 1 Handle..");
    237e:	89 e7       	ldi	r24, 0x79	; 121
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>

	DIO_Vid_SetPinValue(Port_C,pin2,PinHigh);
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	aa e7       	ldi	r26, 0x7A	; 122
    2396:	b4 e4       	ldi	r27, 0x44	; 68
    2398:	89 8f       	std	Y+25, r24	; 0x19
    239a:	9a 8f       	std	Y+26, r25	; 0x1a
    239c:	ab 8f       	std	Y+27, r26	; 0x1b
    239e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a0:	69 8d       	ldd	r22, Y+25	; 0x19
    23a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	4a ef       	ldi	r20, 0xFA	; 250
    23ae:	54 e4       	ldi	r21, 0x44	; 68
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	8d 8b       	std	Y+21, r24	; 0x15
    23ba:	9e 8b       	std	Y+22, r25	; 0x16
    23bc:	af 8b       	std	Y+23, r26	; 0x17
    23be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c0:	6d 89       	ldd	r22, Y+21	; 0x15
    23c2:	7e 89       	ldd	r23, Y+22	; 0x16
    23c4:	8f 89       	ldd	r24, Y+23	; 0x17
    23c6:	98 8d       	ldd	r25, Y+24	; 0x18
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <Handle_EXTI1+0x2d6>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9c 8b       	std	Y+20, r25	; 0x14
    23de:	8b 8b       	std	Y+19, r24	; 0x13
    23e0:	3f c0       	rjmp	.+126    	; 0x2460 <Handle_EXTI1+0x354>
	else if (__tmp > 65535)
    23e2:	6d 89       	ldd	r22, Y+21	; 0x15
    23e4:	7e 89       	ldd	r23, Y+22	; 0x16
    23e6:	8f 89       	ldd	r24, Y+23	; 0x17
    23e8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	3f ef       	ldi	r19, 0xFF	; 255
    23ee:	4f e7       	ldi	r20, 0x7F	; 127
    23f0:	57 e4       	ldi	r21, 0x47	; 71
    23f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f6:	18 16       	cp	r1, r24
    23f8:	4c f5       	brge	.+82     	; 0x244c <Handle_EXTI1+0x340>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fa:	69 8d       	ldd	r22, Y+25	; 0x19
    23fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2400:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9c 8b       	std	Y+20, r25	; 0x14
    2420:	8b 8b       	std	Y+19, r24	; 0x13
    2422:	0f c0       	rjmp	.+30     	; 0x2442 <Handle_EXTI1+0x336>
    2424:	88 ec       	ldi	r24, 0xC8	; 200
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9a 8b       	std	Y+18, r25	; 0x12
    242a:	89 8b       	std	Y+17, r24	; 0x11
    242c:	89 89       	ldd	r24, Y+17	; 0x11
    242e:	9a 89       	ldd	r25, Y+18	; 0x12
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <Handle_EXTI1+0x324>
    2434:	9a 8b       	std	Y+18, r25	; 0x12
    2436:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2438:	8b 89       	ldd	r24, Y+19	; 0x13
    243a:	9c 89       	ldd	r25, Y+20	; 0x14
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2442:	8b 89       	ldd	r24, Y+19	; 0x13
    2444:	9c 89       	ldd	r25, Y+20	; 0x14
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	69 f7       	brne	.-38     	; 0x2424 <Handle_EXTI1+0x318>
    244a:	14 c0       	rjmp	.+40     	; 0x2474 <Handle_EXTI1+0x368>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9c 8b       	std	Y+20, r25	; 0x14
    245e:	8b 8b       	std	Y+19, r24	; 0x13
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	98 8b       	std	Y+16, r25	; 0x10
    2466:	8f 87       	std	Y+15, r24	; 0x0f
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	98 89       	ldd	r25, Y+16	; 0x10
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	f1 f7       	brne	.-4      	; 0x246c <Handle_EXTI1+0x360>
    2470:	98 8b       	std	Y+16, r25	; 0x10
    2472:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	DIO_Vid_SetPinValue(Port_C,pin2,PinLow);
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	LCD_vid_GoTo(0,3);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	63 e0       	ldi	r22, 0x03	; 3
    2482:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome!");
    2486:	80 e6       	ldi	r24, 0x60	; 96
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	LCD_vid_GoTo(1,0);
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("EXTI 1 Handle..");
    2496:	89 e7       	ldi	r24, 0x79	; 121
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>

	DIO_Vid_SetPinValue(Port_C,pin3,PinHigh);
    249e:	82 e0       	ldi	r24, 0x02	; 2
    24a0:	63 e0       	ldi	r22, 0x03	; 3
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	aa e7       	ldi	r26, 0x7A	; 122
    24ae:	b4 e4       	ldi	r27, 0x44	; 68
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <Handle_EXTI1+0x3ee>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <Handle_EXTI1+0x46c>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <Handle_EXTI1+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <Handle_EXTI1+0x44e>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <Handle_EXTI1+0x43c>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <Handle_EXTI1+0x430>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <Handle_EXTI1+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <Handle_EXTI1+0x478>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_Vid_SetPinValue(Port_C,pin3,PinLow);
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	63 e0       	ldi	r22, 0x03	; 3
    2590:	40 e0       	ldi	r20, 0x00	; 0
    2592:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_Vid_SetPinValue>
	LCD_vid_GoTo(0,3);
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	63 e0       	ldi	r22, 0x03	; 3
    259a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("Welcome!");
    259e:	80 e6       	ldi	r24, 0x60	; 96
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
	LCD_vid_GoTo(1,0);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
	LCD_vid_SendString("EXTI 1 Handle..");
    25ae:	89 e7       	ldi	r24, 0x79	; 121
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>

	LCD_vid_DisplayClear();
    25b6:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_vid_DisplayClear>


}
    25ba:	e8 96       	adiw	r28, 0x38	; 56
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <main>:

int main(void){
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62


    /*LEDs Initialization*/
DIO_Vid_SetPortDirection(Port_C,output);   //for 4 LEDs: first 4 bins on PORTC for EXTI0 & EXTI1
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_Vid_SetPortDirection>
//	DIO_Vid_SetPortValue(Port_C,0x00);

	/*Modules Initializations*/

                    /*LCD Initializations*/
	DIO_Vid_SetPortDirection(Port_B,output);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	0e 94 90 0a 	call	0x1520	; 0x1520 <DIO_Vid_SetPortDirection>
	DIO_Vid_SetPinDirection(Port_A,pin5,output);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	65 e0       	ldi	r22, 0x05	; 5
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin6,output);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	66 e0       	ldi	r22, 0x06	; 6
    25f2:	41 e0       	ldi	r20, 0x01	; 1
    25f4:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
	DIO_Vid_SetPinDirection(Port_A,pin7,output);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	67 e0       	ldi	r22, 0x07	; 7
    25fc:	41 e0       	ldi	r20, 0x01	; 1
    25fe:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>


		DIO_Vid_SetPinDirection(Port_D,pin2,input);  //INT0
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	62 e0       	ldi	r22, 0x02	; 2
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>
		DIO_Vid_SetPinDirection(Port_D,pin3,input);  //INT1
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	63 e0       	ldi	r22, 0x03	; 3
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	0e 94 0c 08 	call	0x1018	; 0x1018 <DIO_Vid_SetPinDirection>

		   /*Interrupts Initialization*/
		GIE_VidEn();
    2616:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_VidEn>
		EXTI_voidInit();
    261a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <EXTI_voidInit>

		 EXTI_u8Int0SetCallBack(Handle_EXTI0);
    261e:	83 ec       	ldi	r24, 0xC3	; 195
    2620:	9f e0       	ldi	r25, 0x0F	; 15
    2622:	0e 94 1c 07 	call	0xe38	; 0xe38 <EXTI_u8Int0SetCallBack>
		 EXTI_u8Int1SetCallBack(Handle_EXTI1);
    2626:	86 e8       	ldi	r24, 0x86	; 134
    2628:	90 e1       	ldi	r25, 0x10	; 16
    262a:	0e 94 6c 07 	call	0xed8	; 0xed8 <EXTI_u8Int1SetCallBack>

		 LCD_Vid_Init();
    262e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <LCD_Vid_Init>

		 LCD_vid_DisplayClear();
    2632:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_vid_DisplayClear>

while(1){

			 LCD_vid_GoTo(0,0);
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
			 LCD_vid_SendString("Welcome to MP4!");
    263e:	89 e8       	ldi	r24, 0x89	; 137
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>

			 LCD_vid_GoTo(1,3);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	63 e0       	ldi	r22, 0x03	; 3
    264a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <LCD_vid_GoTo>
			 LCD_vid_SendString("Wazeefa_Tech");
    264e:	89 e9       	ldi	r24, 0x99	; 153
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 65 0e 	call	0x1cca	; 0x1cca <LCD_vid_SendString>
    2656:	ef cf       	rjmp	.-34     	; 0x2636 <main+0x6a>

00002658 <__udivmodhi4>:
    2658:	aa 1b       	sub	r26, r26
    265a:	bb 1b       	sub	r27, r27
    265c:	51 e1       	ldi	r21, 0x11	; 17
    265e:	07 c0       	rjmp	.+14     	; 0x266e <__udivmodhi4_ep>

00002660 <__udivmodhi4_loop>:
    2660:	aa 1f       	adc	r26, r26
    2662:	bb 1f       	adc	r27, r27
    2664:	a6 17       	cp	r26, r22
    2666:	b7 07       	cpc	r27, r23
    2668:	10 f0       	brcs	.+4      	; 0x266e <__udivmodhi4_ep>
    266a:	a6 1b       	sub	r26, r22
    266c:	b7 0b       	sbc	r27, r23

0000266e <__udivmodhi4_ep>:
    266e:	88 1f       	adc	r24, r24
    2670:	99 1f       	adc	r25, r25
    2672:	5a 95       	dec	r21
    2674:	a9 f7       	brne	.-22     	; 0x2660 <__udivmodhi4_loop>
    2676:	80 95       	com	r24
    2678:	90 95       	com	r25
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	08 95       	ret

00002680 <__prologue_saves__>:
    2680:	2f 92       	push	r2
    2682:	3f 92       	push	r3
    2684:	4f 92       	push	r4
    2686:	5f 92       	push	r5
    2688:	6f 92       	push	r6
    268a:	7f 92       	push	r7
    268c:	8f 92       	push	r8
    268e:	9f 92       	push	r9
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	ca 1b       	sub	r28, r26
    26aa:	db 0b       	sbc	r29, r27
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	09 94       	ijmp

000026b8 <__epilogue_restores__>:
    26b8:	2a 88       	ldd	r2, Y+18	; 0x12
    26ba:	39 88       	ldd	r3, Y+17	; 0x11
    26bc:	48 88       	ldd	r4, Y+16	; 0x10
    26be:	5f 84       	ldd	r5, Y+15	; 0x0f
    26c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ca:	b9 84       	ldd	r11, Y+9	; 0x09
    26cc:	c8 84       	ldd	r12, Y+8	; 0x08
    26ce:	df 80       	ldd	r13, Y+7	; 0x07
    26d0:	ee 80       	ldd	r14, Y+6	; 0x06
    26d2:	fd 80       	ldd	r15, Y+5	; 0x05
    26d4:	0c 81       	ldd	r16, Y+4	; 0x04
    26d6:	1b 81       	ldd	r17, Y+3	; 0x03
    26d8:	aa 81       	ldd	r26, Y+2	; 0x02
    26da:	b9 81       	ldd	r27, Y+1	; 0x01
    26dc:	ce 0f       	add	r28, r30
    26de:	d1 1d       	adc	r29, r1
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	ed 01       	movw	r28, r26
    26ec:	08 95       	ret

000026ee <_exit>:
    26ee:	f8 94       	cli

000026f0 <__stop_program>:
    26f0:	ff cf       	rjmp	.-2      	; 0x26f0 <__stop_program>
